1️⃣. Odoo র ORM এর মূল মেথডগুলো (create, read, write, unlink) সম্পর্কে বলুন|
ওডু ORM (Object-Relational Mapping) এর মূল মেথডগুলো ব্যবহার করে আপনি ডাটাবেসে 
    ডাটা ক্রিয়েট, রিড, আপডেট ও ডিলিট করতে পারবেন। 
১. create(values) → রেকর্ড
কাজ: ডাটাবেসে নতুন রেকর্ড তৈরি করে।
প্যারামিটার: values: ডিকশনারি আকারে ফিল্ডের মান ({'field1': value1, 'field2': value2})।
রিটার্ন: তৈরি করা রেকর্ড অবজেক্ট।
উদাহরণ:
    new_product = self.env['product.product'].create({
        'name': 'New Laptop',
        'type': 'product',
        'list_price': 1500,
    })

২. read([fields]) → লিস্ট অব ডিকশনারি
কাজ: রেকর্ডসেট থেকে ডাটা পড়ে।
প্যারামিটার: fields: অপশনাল; ফিল্ড পড়তে চান (ডিফল্ট: সব ফিল্ড)।
রিটার্ন: ডিকশনারির লিস্ট ([{'id': 1, 'name': 'Laptop'}, ...])।
উদাহরণ:
    products = self.env['product.product'].search([('type', '=', 'product')])
    product_data = products.read(['name', 'list_price'])
✅ ব্যবহারের ক্ষেত্র:
যখন শুধু ডাটা পড়তে চান (রেকর্ডসেট ম্যানিপুলেশন না করে)।

৩. write(values) → Boolean
কাজ: রেকর্ডসেটের মান আপডেট করে।
প্যারামিটার:values: ডিকশনারি ({'field1': new_value})।
রিটার্ন: True (সাকসেস হলে)।
উদাহরণ:
    products = self.env['product.product'].search([('type', '=', 'service')])
    products.write({'active': False})  # সব সার্ভিস প্রোডাক্ট নিষ্ক্রিয় করা
⚠️ সতর্কতা:
    বড় রেকর্ডসেটে write() ব্যবহার করলে পারফরম্যান্স ইস্যু হতে পারে।
    _write() ওভাররাইড করে ভ্যালিডেশন যোগ করা যায়।

৪. unlink() → Boolean
কাজ: রেকর্ডসেট ডিলিট করে।
রিটার্ন: True (সাকসেস হলে)।
উদাহরণ:
    draft_orders = self.env['sale.order'].search([('state', '=', 'draft')])
    draft_orders.unlink()  # সব ড্রাফট অর্ডার ডিলিট
✅ বেস্ট প্র্যাকটিস:
    unlink() এর আগে চেক করুন (if record.exists():)।
    _unlink() ওভাররাইড করে ডিলিট প্রিভেন্ট করা যায়।

⭐ search(domain) → রেকর্ডসেট
কাজ: ডোমেইন অনুযায়ী রেকর্ড খুঁজে।
    domain = [('price', '>', 100), ('active', '=', True)]
    products = self.env['product.product'].search(domain)
⭐ browse(ids) → রেকর্ডসেট
কাজ: আইডি দিয়ে সরাসরি রেকর্ড লোড করে।
    duct = self.env['product.product'].browse([1, 2, 3])
⭐ exists() → রেকর্ডসেট
কাজ: চেক করে রেকর্ড ডাটাবেসে আছে কিনা।
    if product.exists():
        product.write(...)
⭐ একটি সম্পূর্ণ উদাহরণ

# 1. ক্রিয়েট
    new_order = self.env['sale.order'].create({
        'partner_id': 1,
        'order_line': [(0, 0, {'product_id': 1, 'qty': 2})]
    })

# 2. রিড
    order_data = new_order.read(['name', 'amount_total'])

# 3. আপডেট
    new_order.write({'state': 'confirmed'})

# 4. ডিলিট
    if new_order.exists():
        new_order.unlink()

2️⃣. search() এবং browse() মেথডের মধ্যে পার্থক্য কি?
ওডু (Odoo) ORM-এ search() এবং browse() উভয়ই রেকর্ডসেট রিটার্ন করে, 
তবে এদের কাজের পদ্ধতি এবং ব্যবহারের ক্ষেত্রে উল্লেখযোগ্য পার্থক্য রয়েছে। 
১. search(domain)
কাজ:ডোমেইন (শর্ত) অনুযায়ী ডাটাবেস থেকে রেকর্ড খুঁজে বের করে।
ডাটাবেসে প্রকৃত SQL কুয়েরি চালায়।
প্যারামিটার:
    domain: লিস্ট অব টুপলস ([('field', 'operator', 'value')]), যেমন: [('price', '>', 100)]।
    offset, limit, order: পেজিনেশন/সর্টিংয়ের জন্য।
রিটার্ন:ম্যাচ করা রেকর্ডসেট (যদি না পাওয়া যায়, খালি রেকর্ডসেট)।
উদাহরণ:
    products = self.env['product.product'].search([('price', '>', 100)])
বৈশিষ্ট্য:
    ✅ ফিল্টারিং সাপোর্ট: শর্ত দিয়ে ডাটা ফিল্টার করা যায়।
    ✅ পারফরম্যান্স: বড় ডাটাসেটে limit ও order ব্যবহার করুন।
    ❌ আইডি জানা না থাকলে: শর্ত দিয়ে খুঁজতে হবে।

২. browse(ids)
কাজ:আইডি (ID) দিয়ে সরাসরি রেকর্ড লোড করে (ডাটাবেসে কোনো কুয়েরি ছাড়াই যদি রেকর্ড ক্যাশে থাকে)।
ইন-মেমরি রেকর্ড এক্সেস করতে ব্যবহৃত হয়।
প্যারামিটার:
    ids: আইডির লিস্ট/একক আইডি (যেমন: [1, 2, 3] বা 1)।
রিটার্ন:রেকর্ডসেট (যদি আইডি না থাকে, অস্তিত্বহীন রেকর্ডসেট)।
উদাহরণ:
    product = self.env['product.product'].browse([1, 2, 3])
বৈশিষ্ট্য:
    ✅ দ্রুত: আইডি জানা থাকলে দ্রুত এক্সেস করে (ক্যাশে ব্যবহার করে)।
    ❌ নো ফিল্টারিং: শর্ত দিয়ে খোঁজার সুযোগ নেই।
    ⚠️ ভালিডেশন: exists() দিয়ে চেক করুন (browse() ডাটাবেসে রেকর্ড আছে কিনা নিশ্চিত করে না)।

3️⃣. ওডুতে ভিউস (Views) কত প্রকার ও কি কি?
১. ফর্ম ভিউ (Form View)
    উদ্দেশ্য: একটি একক রেকর্ড বিস্তারিতভাবে দেখানো (CRUD অপারেশনের জন্য)।
২. ট্রি/লিস্ট ভিউ (Tree View)
    উদ্শেশ্য: একাধিক রেকর্ড টেবিল আকারে দেখানো (লিস্ট ভিউ নামেও পরিচিত)।
৩. ক্যানবান ভিউ (Kanban View)
    উদ্দেশ্য: ড্র্যাগ অ্যান্ড ড্রপ ইন্টারফেস (যেমন: টাস্ক ম্যানেজমেন্ট)।
৪. গ্রাফ ভিউ (Graph View)
    উদ্দেশ্য: ডাটা গ্রাফ/চার্ট আকারে ভিজুয়ালাইজ করা।
৫. পাইভট ভিউ (Pivot View)
    উদ্দেশ্য: ডাটা মাল্টি-ডাইমেনশনাল অ্যানালিসিস (এক্সেলের পাইভট টেবিলের মতো)।
৬. ক্যালেন্ডার ভিউ (Calendar View)
    উদ্দেশ্য: ইভেন্ট/টাস্ক তারিখ অনুযায়ী দেখানো।
৭. সার্চ ভিউ (Search View)
    উদ্দেশ্য: রেকর্ড ফিল্টার/সার্চ করার ইন্টারফেস কাস্টমাইজ করা।
৮. ড্যাশবোর্ড ভিউ (Dashboard View)
    উদ্শেশ্য: মাল্টি-ভিউ একই পেজে দেখানো (গ্রাফ, পাইভট, ক্যানবান সমন্বিত)।
৯. অ্যাক্টিভিটি ভিউ (Activity View)
    উদ্দেশ্য: টাস্ক/অ্যাক্টিভিটি ট্র্যাকিং (ইমেইল, কল, মিটিং)।
১০. ম্যাপ ভিউ (Map View)
    উদ্শেশ্য: জিওলোকেশন ডাটা ম্যাপে দেখানো (যেমন: কাস্টমার অ্যাড্রেস)।

4️⃣. QWeb টেমপ্লেট কি এবং কিভাবে এটি ব্যবহার করা হয়?
QWeb হলো Odoo-র পাওয়ারফুল টেমপ্লেটিং ইঞ্জিন যা ডায়নামিক HTML, রিপোর্ট, এবং UI কম্পোনেন্ট জেনারেট করতে ব্যবহৃত হয়। 
এটি XML-ভিত্তিক এবং Python/JavaScript এর সাথে ইন্টিগ্রেটেড।
✅ QWeb টেমপ্লেটের প্রধান ব্যবহার
    PDF রিপোর্ট ডিজাইন (যেমন: ইনভয়েস, সেলস অর্ডার)।
    ওয়েবসাইট/ফ্রন্টএন্ড টেমপ্লেট (Odoo-র ওয়েবসাইট মডিউলে)।
    ক্যানবান/ড্যাশবোর্ড ভিউ কাস্টমাইজেশন।
✅ QWeb-এর মূল ডিরেক্টিভস (Directives)
ডিরেক্টিভ	ব্যবহার	                                উদাহরণ
t-esc	    HTML এস্কেপ সহ ভ্যালু রেন্ডার।	    <t t-esc="user.name"/>
t-raw	    HTML এস্কেপ ছাড়া রেন্ডার।	        <div t-raw="html_content"/>
t-foreach	লুপ চালানোর জন্য।	             t-foreach="[1, 2, 3]" t-as="i"
t-if / t-elif / t-else	কন্ডিশনাল রেন্ডারিং।    <t t-if="amount > 0">Positive</t>
t-call	    অন্য টেমপ্লেট কল করা।	         <t t-call="report.header"/>
t-set	    ভ্যারিয়েবল ডিফাইন করা।	          <t t-set="total" t-value="100"/>

5️⃣. RPC API এবং XML-RPC এর মধ্যে পার্থক্য কি?
