1️⃣. odoo কি এবং এর মূল কম্পোনেন্টগুলো কি কি?
ans - Odoo হলো একটি ওপেন-সোর্স এন্টারপ্রাইজ রিসোর্স প্ল্যানিং (ERP) সফটওয়্যার, যা ব্যবসায়িক প্রক্রিয়াগুলিকে স্বয়ংক্রিয় ও একীভূত করে। 
এটি ব্যবসার বিভিন্ন মডিউল (যেমন অ্যাকাউন্টিং, ইনভেন্টরি, সেলস, HR, ই-কমার্স ইত্যাদি) একই প্ল্যাটফর্মে অফার করে।

Odoo-এর মূল কম্পোনেন্টগুলো:
    1. Odoo কোর (Core Framework)
        এটি Odoo-এর মূল আর্কিটেকচার, যা Python-এ লেখা এবং PostgreSQL ডাটাবেস ব্যবহার করে।
        মডিউলার ডিজাইন, ORM (Object-Relational Mapping), ওয়েব ফ্রেমওয়ার্ক এবং API সাপোর্ট প্রদান করে।
    2. মডিউলসমূহ (Modules/Apps)
        Odoo-তে শতাধিক ইন্টিগ্রেটেড মডিউল রয়েছে, যেগুলো বিভিন্ন ব্যবসায়িক প্রক্রিয়া পরিচালনা করে। কিছু জনপ্রিয় মডিউল:
            সেলস (Sales) – অর্ডার ম্যানেজমেন্ট, কোটেশন, ইনভয়েসিং।
            অ্যাকাউন্টিং (Accounting) – জার্নাল এন্ট্রি, লেজার ম্যানেজমেন্ট, ট্যাক্স ম্যানেজমেন্ট।
            ইনভেন্টরি (Inventory) – স্টক ম্যানেজমেন্ট, ওয়্যারহাউস অপ্টিমাইজেশন।
            মানব সম্পদ (HR) – এমপ্লয়ি রেকর্ড, পে-রোল, অ্যাটেনডেন্স।
            ই-কমার্স (eCommerce) – অনলাইন স্টোর ম্যানেজমেন্ট।
            ম্যানুফ্যাকচারিং (Manufacturing) – প্রোডাকশন প্ল্যানিং, বিল অফ ম্যাটেরিয়াল (BOM)।
    3. ওয়েব ইন্টারফেস
        একটি ইউজার-ফ্রেন্ডলি ওয়েব-বেইজড ড্যাশবোর্ড (Odoo 15+ এ Owl Framework ব্যবহার করা হয়)।
        রেস্পন্সিভ ডিজাইন (মোবাইল ও ডেস্কটপ সাপোর্ট)।
    4. Odoo Studio (কাস্টমাইজেশন টুল)
        নো-কোড/লো-কোড টুল যার মাধ্যমে ইউজাররা নিজেরা অ্যাপ্লিকেশন কাস্টমাইজ করতে পারে।
    5. Odoo.sh (ক্লাউড প্ল্যাটফর্ম)
        Odoo-র অফিসিয়াল ক্লাউড সার্ভিস, যেখানে অটোমেটিক ডেপ্লয়মেন্ট, হোস্টিং ও ডেভেলপমেন্ট টুল রয়েছে।
Odoo-এর সুবিধা:
    ✔️ মডিউলার সিস্টেম – প্রয়োজন অনুযায়ী মডিউল যোগ/বিয়োগ করা যায়।
    ✔️ ক্লাউড ও অন-প্রিমাইজ – Odoo.sh বা নিজের সার্ভারে হোস্ট করা যায়।
    ✔️ কাস্টমাইজেশন – Python/XML দিয়ে নতুন অ্যাপ ডেভেলপ করা যায়।
    ✔️ মাল্টি-কোম্পানি ও মাল্টি-ল্যাঙ্গুয়েজ সাপোর্ট।

2️⃣. ওডুর আর্কিটেকচারের স্তরসমূহ
1. কোর ফ্রেমওয়ার্ক (Core Framework)
ওডুর মূল ভিত্তি, যা নিম্নলিখিত উপাদান নিয়ে গঠিত:

    Python-based ORM (Object-Relational Mapping):
        ডাটাবেস অপারেশন (CRUD) অবজেক্ট-ওরিয়েন্টেড পদ্ধতিতে পরিচালনা করে।
        ডাটা ভ্যালিডেশন, ট্রানজেকশন ম্যানেজমেন্ট, এবং অটোমেটিক SQL কুয়েরি জেনারেশন করে।

    ওয়েব ফ্রেমওয়ার্ক:
        HTTP রিকোয়েস্ট হ্যান্ডলিং, রাউটিং, টেমপ্লেট রেন্ডারিং (QWeb টেমপ্লেট ইঞ্জিন)।
        Owl (Odoo Web Library): Odoo 15+ এ ব্যবহৃত মডার্ন জাভাস্ক্রিপ্ট ফ্রেমওয়ার্ক (React-এর মতো কম্পোনেন্ট-ভিত্তিক)।

2. ডাটাবেস লেয়ার (PostgreSQL)
    সমস্ত ডাটা PostgreSQL ডাটাবেসে স্টোর হয়।
    মাল্টি-টেন্যান্সি সাপোর্ট (একটি ইন্সট্যান্সে একাধিক কোম্পানি আলাদা ডাটাবেস/শেমায় চলতে পারে)।
    ডাটাবেস স্কিমা অটোমেটিক্যালি ম্যানেজড হয় (মডিউল ইন্সটল/আপডেট হলে)।

3. মডিউলার আর্কিটেকচার
প্রতিটি ফিচার (যেমন Sales, Accounting) একটি স্বতন্ত্র মডিউল হিসেবে কাজ করে:
মডিউলের উপাদান:
    মডেল (Models): Python ক্লাস (odoo.models.Model থেকে ইনহেরিট) যা ডাটাবেস টেবিল ডিফাইন করে।
    ভিউস (Views): XML ফাইলের মাধ্যমে UI লেআউট (ফর্ম, ট্রি, গ্রাফ, ক্যালেন্ডার ভিউ)।
    কন্ট্রোলার (Controllers): HTTP রিকোয়েস্ট হ্যান্ডল করে (বিশেষত ওয়েব কন্ট্রোলার)।
    স্ট্যাটিক ফাইলস: JS, CSS, ইমেজ (ওয়েব অ্যাসেটস)।
    ডিপেন্ডেন্সি ম্যানেজমেন্ট: মডিউলগুলি পরস্পরের উপর নির্ভরশীল হতে পারে (যেমন account মডিউল sale মডিউল ব্যবহার করে)।

4. ক্লায়েন্ট-সাইড আর্কিটেকচার (Frontend)
    ওয়েব ক্লায়েন্ট: Single-Page Application (SPA) আর্কিটেকচার।
    Owl Framework: কম্পোনেন্ট-ভিত্তিক UI (জাভাস্ক্রিপ্ট)।
    QWeb টেমপ্লেট ইঞ্জিন: ডায়নামিক HTML জেনারেশন।
    মোবাইল অ্যাপ: Odoo-র অফিসিয়াল মোবাইল অ্যাপ (Android/iOS) ওয়েবভিউ-ভিত্তিক।

5. ইন্টিগ্রেশন লেয়ার
    REST/XML-RPC API: এক্সটার্নাল সিস্টেমের সাথে ইন্টিগ্রেশনের জন্য (যেমন Python, PHP, Java)।
    ইভেন্ট বাস (Event Bus): রিয়েল-টাইম কমিউনিকেশনের জন্য (ওয়েবসকেট)।

6. ডেপ্লয়মেন্ট আর্কিটেকচার
    ওডু.এসএইচ (Odoo.sh): ক্লাউড-ভিত্তিক হোস্টিং (অটো-স্কেলিং, Git ইন্টিগ্রেশন)।
    অন-প্রিমাইজ: Docker, Kubernetes, বা সরল Python সার্ভারে ডেপ্লয়যোগ্য।
    লোড ব্যালেন্সিং: মাল্টি-ওয়ার্কার প্রসেস (Gunicorn/nginx) ব্যবহার করে।

3️⃣. ওডু ফ্রেমওয়ার্ক এবং ওডু শার্পের মধ্যে পার্থক্য কি?
1. সংজ্ঞা ও উদ্দেশ্য
ওডু ফ্রেমওয়ার্ক	ওডু.এসএইচ (Odoo.sh)
    i) Odoo-র কোর ওপেন-সোর্স ফ্রেমওয়ার্ক যা Python, PostgreSQL, এবং Owl (ওয়েব ফ্রেমওয়ার্ক) ব্যবহার করে তৈরি।	
    i) Odoo-র অফিসিয়াল ক্লাউড-ভিত্তিক ডেভেলপমেন্ট ও হোস্টিং প্ল্যাটফর্ম।
    ii) অন-প্রিমাইজ বা থার্ড-পার্টি ক্লাউডে (AWS, DigitalOcean) ডেপ্লয় করা যায়।	
    ii) Odoo-র নিজস্ব ক্লাউড ইনফ্রাস্ট্রাকচারে হোস্টেড।
2. ডেপ্লয়মেন্ট ও হোস্টিং
ওডু ফ্রেমওয়ার্ক	ওডু.এসএইচ (Odoo.sh)
    i) ডেভেলপারদের নিজস্ব সার্ভার/ক্লাউডে ম্যানুয়ালি সেটআপ করতে হয় (Docker, Kubernetes, বা সরাসরি Python+Gunicorn)।	
    ii) অটোমেটেড হোস্টিং—Odoo.sh সরাসরি GitHub/GitLab-এর সাথে ইন্টিগ্রেট করে CI/CD (Continuous Integration/Deployment) প্রদান করে।

3. মূল সুবিধা ও সীমাবদ্ধতা
ওডু ফ্রেমওয়ার্ক	ওডু.এসএইচ (Odoo.sh)
    সুবিধা: সম্পূর্ণ নিয়ন্ত্রণ, যেকোনো কাস্টমাইজেশন সম্ভব।	
    সুবিধা: নো-হ্যাসেল হোস্টিং, অটোমেটেড ম্যানেজমেন্ট, Odoo-র অফিসিয়াল সাপোর্ট।
    সীমাবদ্ধতা: ইনফ্রাস্ট্রাকচার ম্যানেজমেন্টের জটিলতা।	
    সীমাবদ্ধতা: কাস্টম সার্ভার/ডাটাবেস ব্যবহারের সীমাবদ্ধতা (Odoo-র ক্লাউডে লক-ইন)।
⚠️ Odoo.sh শুধুমাত্র এন্টারপ্রাইজ ভার্সনের সাথে ব্যবহারযোগ্য (কমিউনিটি ভার্সনে কাজ করবে না)।

4️⃣. ওডু মডিউল কি এবং কিভাবে এটি কাজ করে?
ওডু মডিউল হলো Odoo ERP/CRM সিস্টেমের ফাংশনালিটি এক্সটেন্ড বা কাস্টমাইজ করার জন্য বিল্ডিং ব্লক। 
প্রতিটি মডিউল একটি স্বতন্ত্র অ্যাপ্লিকেশন (যেমন Sales, Accounting, Inventory) যা Odoo-র কোর ফ্রেমওয়ার্কের সাথে ইন্টিগ্রেট হয়ে কাজ করে।

✅ ওডু মডিউলের প্রকারভেদ
    1. অফিসিয়াল মডিউল: Odoo দ্বারা ডেভেলপড (যেমন sale, account, hr).এন্টারপ্রাইজ ভার্সনে অতিরিক্ত ফিচার থাকে।
    2.কাস্টম মডিউল:ডেভেলপারদের দ্বারা তৈরি (বিশেষ ব্যবসায়িক প্রয়োজন মেটাতে)।

✅ ওডু মডিউলের গঠন (Structure)
একটি সাধারণ মডিউলের ফাইল স্ট্রাকচার নিম্নরূপ:
    my_module/
    ├── __init__.py          # Python প্যাকেজ ডিক্লেয়ারেশন
    ├── __manifest__.py      # মেটাডাটা (নাম, ভার্সন, ডিপেন্ডেন্সি)
    ├── models/              # ডাটাবেস মডেল (Python ক্লাস)
    │   ├── __init__.py
    │   └── my_model.py
    ├── views/               # UI XML ফাইল (ফর্ম, ট্রি ভিউ)
    │   └── my_view.xml
    ├── security/            # অ্যাক্সেস কন্ট্রোল (ir.model.access.csv)
    └── controllers/         # ওয়েব রিকোয়েস্ট হ্যান্ডলার (যদি প্রয়োজন)

✅ ওডু মডিউল কীভাবে কাজ করে?
1. ডাটাবেস লেয়ার (Models)
Python ক্লাস হিসেবে ডাটাবেস টেবিল ডিফাইন করা হয়।
উদাহরণ:
    from odoo import models, fields
    class MyTask(models.Model):
        _name = 'my.task'
        _description = 'Custom Task Model'

        name = fields.Char(string='Task Name', required=True)
        is_done = fields.Boolean(string='Done?')
2. ইউজার ইন্টারফেস (Views)
XML ফাইল দ্বারা UI ডিজাইন করা হয় (ফর্ম, লিস্ট, ড্যাশবোর্ড)।
উদাহরণ:
    <record id="view_my_task_form" model="ir.ui.view">
        <field name="name">Task Form</field>
        <field name="model">my.task</field>
        <field name="arch" type="xml">
            <form>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="is_done"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>
3. বিজনেস লজিক (Methods)
Python মেথড ব্যবহার করে লজিক ইম্প্লিমেন্ট করা হয়।
উদাহরণ:
    def mark_all_done(self):
        self.write({'is_done': True})
4. সিকিউরিটি ও অ্যাক্সেস কন্ট্রোল
ir.model.access.csv ফাইলে পারমিশন সেট করা হয়।
উদাহরণ:
    id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
    access_my_task,my.task,model_my_task,base.group_user,1,1,1,0
মডিউল ইনস্টল/আপডেট প্রক্রিয়া
    ইনস্টলেশন:
        __manifest__.py ফাইল পড়ে Odoo ডাটাবেসে মডেল/ভিউ রেজিস্টার করে।
        ডাটাবেস টেবিল তৈরি বা আপডেট করে।
    আপডেট:কোড পরিবর্তন → Apps মেনুতে Upgrade বাটন ক্লিক করুন।

5️⃣. @api.depends, @api.onchange, @api.model - এই ডেকোরেটরগুলোর পার্থক্য কি?
১. @api.depends
উদ্দেশ্য: কম্পিউটেড ফিল্ডের (Computed Fields) মান অটোমেটিক্যালি ক্যালকুলেট করতে ব্যবহৃত হয়। 
যখন নির্ভরশীল ফিল্ডের মান পরিবর্তন হয়, তখন এই মেথড ট্রিগার হয়।
বৈশিষ্ট্য: ডাটাবেস লেভেলে কাজ করে (ফর্ম ভিউ বা সার্ভার সাইড)।
রিয়েল-টাইম আপডেট: নির্ভরশীল ফিল্ড পরিবর্তন হলে স্বয়ংক্রিয়ভাবে পুনরায় ক্যালকুলেট হয়।
রিটার্ন: None (ফিল্ডের মান আপডেট করে)।
উদাহরণ:
    total = fields.Float(compute='_compute_total')

    @api.depends('price', 'quantity')
    def _compute_total(self):
        for record in self:
            record.total = record.price * record.quantity
✅ কখন ব্যবহার করবেন?
যখন একটি ফিল্ডের মান অন্য ফিল্ডের উপর নির্ভরশীল (যেমন: টোটাল প্রাইস = প্রাইস × কোয়ান্টিটি)।

২. @api.onchange
উদ্দেশ্য:ফর্ম ভিউতে ইউজার ইন্টারঅ্যাকশনের সময় রিয়েল-টাইম আপডেট প্রদান করতে (শুধু UI লেভেলে কাজ করে)।
বৈশিষ্ট্য:শুধু ফর্ম ভিউতে কাজ করে (ডাটাবেসে সরাসরি ইফেক্ট না)।
ইউজার ইনপুটের প্রতিক্রিয়া দেখাতে ব্যবহৃত হয় (যেমন: ড্রপডাউন আপডেট, ওয়ার্নিং মেসেজ)।
রিটার্ন: dict (ওয়ার্নিং বা ডোমেইন পরিবর্তনের জন্য)।
উদাহরণ:
    @api.onchange('product_id')
    def _onchange_product(self):
        if self.product_id:
            self.price = self.product_id.list_price
        return {
            'warning': {
                'title': "Price Updated!",
                'message': "Price is set based on product.",
            }
        }
✅ কখন ব্যবহার করবেন?
যখন ইউজার ফর্মে কোনো ফিল্ড এডিট করলে অন্যান্য ফিল্ড অটো-পপুলেট করতে চান (যেমন: প্রোডাক্ট সিলেক্ট করলে প্রাইস আপডেট)।

৩. @api.model
উদ্দেশ্য:মডেল-লেভেলের মেথড তৈরি করতে ব্যবহৃত হয় (যেখানে self একটি রেকর্ডসেট নয়, বরং মডেল ক্লাস নিজে)।
বৈশিষ্ট্য:স্ট্যাটিক মেথডের মতো কাজ করে (রেকর্ড-স্পেসিফিক ডাটা অ্যাক্সেস না)।
সাধারণত ইউটিলিটি ফাংশন বা ফ্যাক্টরি মেথডে ব্যবহার করা হয়।
রিটার্ন: যেকোনো টাইপ (ডিকশনারি, রেকর্ডসেট, ইত্যাদি)।
উদাহরণ:
    @api.model
    def create_default_order(self, partner_id):
        return self.create({
            'partner_id': partner_id,
            'date': fields.Date.today(),
        })
✅ কখন ব্যবহার করবেন?
যখন একটি জেনেরিক মেথড তৈরি করতে চান যা নির্দিষ্ট রেকর্ডের উপর নির্ভরশীল নয় (যেমন: ডিফল্ট অর্ডার ক্রিয়েট)।

পার্থক্যের সারাংশ
ডেকোরেটর	    ট্রিগার হয়	                ব্যবহারের ক্ষেত্র	               রিটার্ন ভ্যালু
@api.depends	নির্ভরশীল ফিল্ডের পরিবর্তন	    কম্পিউটেড ফিল্ড	        None (ফিল্ড আপডেট)
@api.onchange	ফর্ম ভিউতে ফিল্ড এডিট	    UI ইন্টারঅ্যাকশন	        dict (ওয়ার্নিং)
@api.model	    ম্যানুয়ালি কল করা	           মডেল-লেভেলের মেথড	    যেকোনো টাইপ
গুরুত্বপূর্ণ নোটস
self-এর প্রকৃতি:
@api.model: self = মডেল ক্লাস (self.env['sale.order'] এর মতো)।
@api.depends/@api.onchange: self = রেকর্ডসেট (যেমন: self.price)।

ডাটাবেস ইফেক্ট:
@api.depends: ডাটাবেসে ফিল্ডের মান আপডেট করে।
@api.onchange: শুধু UI-তে দেখায় (সেভ না করা পর্যন্ত ডাটাবেসে সংরক্ষণ হয় না)।

পারফরম্যান্স:
@api.depends ভারী লজিক এড়িয়ে চলুন (বড় রেকর্ডসেটে স্লো হতে পারে)।