What is Object Oriented Programming (OOPs)?
Object Oriented Programming (also known as OOPs) is a programming paradigm where the complete software operates as a bunch of objects talking to each other.
An object is a collection of data and the methods which operate on that data.
1) Class
2) Object
3) Methods
4) Inheritance
5) Encaptulation
6) Polymorphism
7) Abstraction

=================================================================================================================================================================
1-> Class : Ans: A class is a blueprint or template for creating objects. A class is a building block of Object Oriented Programs. 
It is a user-defined data type that contains the data members and member functions that operate on the data members. 
It is like a blueprint or template of objects having common properties and methods.
=================================================================================================================================================================
2-> Object: An object is called an instance of a class. For example, suppose Bike is a class then we can create objects like bike1 , bike2 , etc from the class. 
=================================================================================================================================================================
3-> Methods: Methods are functions that are associated with an object or a class.
=================================================================================================================================================================
4-4 -> What are the main features of OOPs?
The main feature of the OOPs, also known as 4 pillars or basic principles of OOPs are as follows:
    Encapsulation
    Data Abstraction
    Polymorphism
    Inheritance
=================================================================================================================================================================
5-> Inheritance: Inheritance is a fundamental concept in object-oriented programming (OOP) that allows a class is derived from another class and uses data and 
implementation of that other class. The class which is derived is called child or derived or subclass and the class from which the child class is derived 
is called parent or base or superclass.
The main purpose of Inheritance is to increase code reusability. It is also used to achieve Runtime Polymorphism.

Type of Inheritance:
I) Single Inheritance
II) Multiple  Inheritance
III) Multilevel Inheritance
IV) Hierarchical Inheritance
V) Hybrid Inheritance

Single Inheritance: Child class derived directly from the base class
-------------------
class Parent:
    pass

class Child(Parent):
    pass


Multiple Inheritance: hild class derived from multiple base classes.
---------------------
class Parent1:
    pass

class Parent2:
    pass

class Child(Parent1, Parent2):
    pass


Multilevel Inheritance:  Child class derived from the class which is also derived from another base class.
------------------------
class Grandparent:
    pass

class Parent(Grandparent):
    pass

class Child(Parent):
    pass


Hierarchical Inheritance:  Multiple child classes derived from a single base class.
--------------------------
class Parent:
    pass

class Child1(Parent):
    pass

class Child2(Parent):
    pass


Hybrid Inheritance: Inheritance consisting of multiple inheritance types of the above specified.
-------------------
class A:
    pass

class B(A):
    pass

class C(A):
    pass

class D(B, C):
    pass
=================================================================================================================================================================
6-> Encaptulation: Data and Method are binding in a single unit.
Ans: Encapsulation is the binding of data and methods that manipulate them into a single unit such that the sensitive data is hidden from the users
    Encaptulation = single unit(data + method)

Two main types of encapsulation:
I) Public Access (No Encapsulation)
II) Private Access (Encapsulation)

========================================================================================
7-> Polymorphism
# compileTime-> static binding-> early binding->overloading
# runtime-> dynamic binding -> late binding -> overriding


Ans: The term "polymorphism" in computer science and mathematics is composed of two Greek words:

Poly: "Poly" means "many" or "multiple."
Morphis: "Morphis" comes from "morphe," which means "form" or "shape."
When combined, "polymorphism" roughly translates to "many forms" or "multiple shapes."

I) Compile-Time Polymorphism (Static Binding):
Compile-time polymorphism, also known as static polymorphism, occurs when the decision about which method or function to call is made at compile-time (before the program is run).
Compile time polymorphism, also known as static polymorphism or early binding is the type of polymorphism where the binding of the call to its code is done at the compile time. 
Method overloading or operator overloading are examples of compile-time polymorphism.

class Calculator:
    def add(self, a, b):
        return a + b

    def add(self, a, b, c):
        return a + b + c

calc = Calculator()
result1 = calc.add(1, 2)          # Calls the first add method
result2 = calc.add(1, 2, 3)       # Calls the second add method


II)Run-Time Polymorphism (Dynamic Binding):
Run-time polymorphism, also known as dynamic polymorphism, occurs when the decision about which method or function to call is made at run-time (while the program is executing).
Also known as dynamic polymorphism or late binding, runtime polymorphism is the type of polymorphism where the actual implementation of the function is determined during the runtime or execution.
Method overriding is an example of this method.

class Shape:
    def area(self):
        pass

class Circle(Shape):
    def area(self, radius):
        return 3.14 * radius ** 2

class Rectangle(Shape):
    def area(self, length, width):
        return length * width

circle = Circle()
rectangle = Rectangle()

shape1 = circle  # A Circle object treated as a Shape object
shape2 = rectangle  # A Rectangle object treated as a Shape object

result1 = shape1.area(5)           # Calls Circle's area method
result2 = shape2.area(4, 6)        # Calls Rectangle's area method

=================================================================================================================================================================

8-> Abstraction:
Abstraction is one of the fundamental principles of object-oriented programming (OOP) that involves hiding complex implementation details and showing only the necessary features of an object.

Abstract Classes:
-------------------------------
*Python allows you to define abstract base classes (ABCs) using the abc module.
*Abstract classes cannot be instantiated directly but serve as templates for other classes.
*They define a common set of methods that must be implemented by concrete subclasses, ensuring that certain methods are present.

from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius ** 2

Method Abstraction:
-------------------
Abstraction can be applied to methods within a class by using the @abstractmethod decorator.
This decorator marks a method as abstract, indicating that it must be overridden in concrete subclasses.

from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def make_sound(self):
        pass

class Dog(Animal):
    def make_sound(self):
        return "Woof!"

class Cat(Animal):
    def make_sound(self):
        return "Meow!"

Data Abstraction:
------------------

Abstraction can also be applied to data attributes by making them private or protected.
This restricts direct access to the internal state of an object and encourages access through methods, providing better control over data manipulation.


class BankAccount:
    def __init__(self, account_number, balance):
        self._account_number = account_number  # Protected attribute
        self._balance = balance

    def get_balance(self):
        return self._balance

    def deposit(self, amount):
        self._balance += amount

    def withdraw(self, amount):
        if self._balance >= amount:
            self._balance -= amount
        else:
            print("Insufficient balance")

=================================================================================================================================================================
9-> What are access specifiers? What is their significance in OOPs?
Access specifiers are special types of keywords that are used to specify or control the accessibility of entities like classes, methods, and so on. Private, Public, 
and Protected are examples of access specifiers or access modifiers.
The key components of OOPs, encapsulation and data hiding, are largely achieved because of these access specifiers.
account = BankAccount("12345", 1000)
balance = account.get_balance()  # Accessing data through a method

=================================================================================================================================================================
10-> What is the difference between Structured Programming and Object Oriented Programming?
    A programâ€™s logical structure is provided by structural programming, => Programming that is object-oriented is built on objects having a state and behavior.
    It follows a Top-to-Down approach. => It follows a bottom-to-top approach
    Code is given more importance. => Data is given more importance in OOPs.
    Modifying the code is difficult as compared to OOPs. => Modifying and updating the code is easier

=================================================================================================================================================================
11-> What is the difference between overloading and overriding?
A compile-time polymorphism feature called overloading allows an entity to have numerous implementations of the same name. Method overloading and operator overloading are two examples.

Overriding is a form of runtime polymorphism where an entity with the same name but a different implementation is executed. It is implemented with the help of virtual functions.

=================================================================================================================================================================
12-> What is Constructor?
A constructor is a block of code that initializes the newly created object. A constructor resembles an instance method but itâ€™s not a method as it doesnâ€™t have a return type. 
It generally is the method having the same name as the class but in some languages, it might differ. For example:

In python, a constructor is named __init__. 
```
    class base:
        def __init__(self):
            print("This is a constructor")
```

=================================================================================================================================================================
13-> What is a destructor?
A destructor is a method that is automatically called when the object is made of scope or destroyed.

In C++, the destructor name is also the same as the class name but with the (~) tilde symbol as the prefix.

In Python, the destructor is named __del__.
```
class base:
    def __del__(self):
        print("This is destructor")
```

=================================================================================================================================================================
14 -> Can we overload the constructor in a class?
ANS - Yes
15 -> Can we overload the destructor in a class?
ANS - No
