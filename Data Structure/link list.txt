1. Link kist vs Array :
	a) অ্যারের সাথে লিংক লিস্টের একটা বড় পার্থক্য হলো অ্যারের তথ্যগুলো মেমরিতে পরপর সংরক্ষণ করা হয়। যদি অ্যারেটা একটা 4 বাইটের ইন্টিজার অ্যারে হয় 
	   এবং অ্যারের প্রথম এলিমেন্টটা যদি থাকে x তম মেমরি সেল এ, তাহলে পরের ৩টি এলিমেন্ট x+4, x+8, x+12 মেমরি সেল এ থাকবে।
	   সেজন্য অ্যারের প্রথম এলিমেন্টের অ্যাড্রেস জানলেই এরপর যেকোনো এলিমেন্টের অ্যাড্রেস সহজেই বের করে ফেলা যায়, ইন্টিজার অ্যারের 
	   pতম এলিমেন্ট থাকে x+p∗4 অ্যাড্রেসে যেখানে x হলো শূন্যতম এলিমেন্টের অ্যাড্রেস।
	a) লিংকড লিস্টে তথ্যগুলো থাকে ছড়িয়ে-ছিটিয়ে, তাই প্রতিটা এলিমেন্টকে পরের এলিমেন্টের ঠিকানা সংরক্ষণ করে রাখতে হয়।
	
	b) লিংক লিস্ট এর সুবিধা হলো চাইলেও কোনো তথ্য মাঝখান থেকে মুছে ফেলা যায়। অ্যারেতে তুমি চাইলেই মাঝখান থেকে একটা ইনডেক্স মুছে ফেলতে পারবে না, 
	   মুছতে হলে ডানের সব এলিমেন্টকে একঘর বামে টেনে এনে ফাকা জায়গা পূরণ করতে হবে, এবং সবার শেষের এলিমেন্টটাকে মুছে ফেলতে হবে। 
	   কিন্তু লিংকড লিস্টে তুমি সহজেই মাঝখান থেকে একটা নোড মুছে ফেলতে পারবে।
	
	C) Arrays store elements in contiguous memory locations BUT Linked lists are usually not stored in contiguous locations.
	d) Array Fixed in size BUT Link list Dynamic in size.
	e) Array Memory allocated at compile time BUT link list memory  allocated at run time
	f) Array use less memory BUT link list use more memory beacuse it sote data and address of next node.
	g) Arry element can be access easily BUT link list element accessing require the traversel of whole link list.
	
								Array 		Singly 		Doubly
	i) Insert head -     		O(N)		O(1)		O(1)
	ii) Insert Tail -     		O(1)		O(1)		O(1)
	iii) Insert Any-position -  O(N)		O(N)		O(N)
	
	iv) Delete head -     		O(N)		O(1)		O(1)
	v) Delete Tail -     		O(1)		O(N)		O(1)
	vi) Delete Any-position -   O(N)		O(N)		O(N)
	
	vii) Access head -     		O(1)		O(1)		O(1)
	viii) Access Tail -     	O(1)		O(1)		O(1)
	iX) Access Any-position -   O(1)		O(N)		O(N)

1.1. What is link list :
	লিংক লিস্টের প্রতিটা এলিমেন্ট কে বলবো আমরা নোড। প্রতিটা নোডে সাধারণত দুইটা তথ্য থাকে: ১) যে তথ্যটা আমরা সংরক্ষণ করতে চাচ্ছি ২) পরবর্তি তথ্যটা কোথায় আছে তার ঠিকানা।
	লিংকড লিস্টের আরেকটা ব্যবহার হলো বিভিন্ন ধরণের ট্রি তৈরি করা।

2. Insert (head, tail, any position) :

3. Delete (head, tail, any position) :

4. Duplicat value remove : Time Complexity: O(N2) Auxiliary Space: O(1)
	/* Function to remove duplicates from a unsorted linked list */
	void removeDuplicates(struct Node* start){
		struct Node *ptr1, *ptr2, *dup;
		ptr1 = start;
	 
		/* Pick elements one by one */
		while (ptr1 != NULL && ptr1->next != NULL) {
			ptr2 = ptr1;
	 
			/* Compare the picked element with rest of the elements */
			while (ptr2->next != NULL) {
				/* If duplicate then delete it */
				if (ptr1->data == ptr2->next->data) {
					/* sequence of steps is important here */
					dup = ptr2->next;
					ptr2->next = ptr2->next->next;
					delete (dup);
				}
				else /* This is tricky */
					ptr2 = ptr2->next;
			}
			ptr1 = ptr1->next;
		}
	}

5. Sorting :  O(n^2)
	for (Node *i = head; i->next != NULL; i = i->next)
    {
        for (Node *j = i->next; j != NULL; j = j->next)
        {
            if (i->val > j->val)
            {
                swap(i->val, j->val);
            }
        }
    }

6. Reverse : O(N)
### Singly__
	void reverse(Node *&head, Node *cur){
		if (cur->next == NULL){
			head = cur;
			return;
		}
		reverse(head, cur->next);
		cur->next->next = cur;
		cur->next = NULL;
	}
	
### Doubly__
	 void reverse(Node *head, Node *tail){
		 Node *i = head;
		 Node *j = tail;
		 while (i != j && i->next != j){
			 swap(i->val, j->val);
			 i = i->next;
			 j = j->prev;
		}
	 }
	 
	 
7. List : 
	List is a STL library function in doubly linked list.
	
8. Detect cycle :
	Apply hare and Tortoise algorithms or First and Slow technique.