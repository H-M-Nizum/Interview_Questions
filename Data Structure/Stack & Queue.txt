1. Stack:
	Stack is a linear data structure. স্ট্যাককে বলা হয় LIFO বা লাস্ট-ইন-ফার্স্ট-আউট ডাটা স্ট্রাকচার। (EX:- বইয়ের একটা স্ট্যাক।)
	Associated functions  : 
		a) empty() 
		b) size() 
		c) top() 
		d) push(g)  
		e) pop() 
	স্ট্যাকে প্রতিটা অপারেশনের কমপ্লেক্সিটি O(1)
	
	** স্ট্যাকের আকার যদি সীমিত হয়, যেমন যদি ১০টার বেশি বস্তু রাখার সামর্থ কোনো স্ট্যাকের না থাকে তাহলে ১১তম বস্তু পুশ করলে স্ট্যাকটা “ওভারফ্লো” স্টেট এ চলে যাবে 
		এবং তোমার প্রোগ্রাম ক্র্যাশ করবে। একই ভাবে খালি স্ট্যাক থেকে কিছু পপ করার চেষ্টা করলে স্ট্যাক ‘আন্ডারফ্লো’ স্টেটে চলে যাবে এবং প্রোগ্রাম ক্র্যাশ করবে। 
		স্ট্যাক ব্যবহারের সময় এই দুই ব্যাপারে খুব সতর্ক থাকতে হয়।
	
2. Stack work procidure :
	Stack implemet by dynamic array or doubly link list . But Doubly link list is efficient approce .
	* singly not use for tail pop().
	
	দুইরকম অপারেশন করা যায়:
		Push(new_element): স্ট্যাকের উপরে নতুন বস্তুটা রাখো। যদি শুরুতে স্ট্যাকটা খালি হয়, তাহলে প্রথম জায়গায় বস্তুটা রাখতে হবে।
		Pop(): স্ট্যাকের উপরের বস্তুটা সরিয়ে ফেলো। যদি শুরুতে স্ট্যাকটা খালি হয় তাহলে এই অপারেশনটা করা সম্ভব না।
		
		* স্ট্যাকে আরেকটা অপারেশন থাকতে পারে Peek(), যেটা ব্যবহার করে সবার উপরের বস্তুটা কি জানা যাবে বস্তুটা পপ না করেই।
		
		* আমরা ব্রাউজারে প্রায়ই আগের ওয়েবসাইটে ফিরে যেতে “Back” বোতামে চাপ দেই। এটাও স্ট্যাক ব্যবহার করে তৈরি করা যায়। 
		  যখন নতুন ওয়েবসাইটে যাবে তখন আগের ওয়েবসাইটটাকে স্ট্যাকের উপরে রেখে দাও, ফিরে যেতে চাইলে স্ট্যাকের উপরের ওয়েব সাইটে ফেরত গিয়ে স্ট্যাক থেকে পপ করে দাও। 
		  এভাবে তুমি তোমার সফটওয়্যারে “undo” ফিচার বানাতে পারো।
		* স্ট্যাকের খুবই কমন একটা ব্যবহার হলো ব্রাকেট এর ব্যালেন্স বা ভারসাম্য ঠিক আছে সেটা পরীক্ষা করা (Parenthesis Balance)।
		* স্ট্যাকের আরেকটা গুরুত্বপূর্ণ ব্যবহার হলো গাণিতিক ইকুয়েশনের মান বের করা, যেমন (1+(2+5)∗3)+(5∗7) এরকম একটা ইকুয়েশন দেয়া থাকলে মান বের করা খুব সহজ না। 
			কিন্তু রিভার্স পলিশ নোটেশনে লিখলে স্ট্যাক দিয়ে খুব সহজে মান বের করা যায়।

3. Queue : (FIFO)
	কিউ একটা বেসিক ডাটা স্ট্রাকচার। এটাকে তুমি চিন্তা করতে পারো বাসের লাইনের মত, যে সবার সামনে দাড়িয়ে আছে সে সবার আগে উঠবে, নতুন কোনো যাত্রী আসলে সে লাইনের পিছনে দাড়াবে।
	* If queue implemet by array then remove first element it's complexity O(n). using link list then complexity O(1). so queue use linked list.
	
	Associated functions  : 
		a) empty() 
		b) size() 
		c) front() 
		d) push(g)  
		e) pop() 
	প্রতিটা অপারেশনের কমপ্লেক্সিটি O(1)

4. Queue Work procidure : 
	* কিউতে দুইরকম অপারেশন থাকে। এনকিউ(Enqueue) মানে হলো কিউতে নতুন এলিমেন্ট যোগ করা এবং ডিকিউ(Dequeue) বা পপ মানে হলো সবথেকে পুরোনো এলিমেন্টটা কিউ থেকে সরিয়ে ফেলা।
	* অ্যারে ব্যবহার করে আমরা ফিক্সড সাইজের কিউ ইমপ্লিমেন্ট করতে পারি। আমাদেরকে সবসময় দুইটা পয়েন্টার রাখতে হবে, হেড (Head) পয়েন্টার নির্দেশ করবে কিউয়ের সামনের এলিমেন্টের পজিশন 
	  এবং টেইল (Tail) পয়েন্টার নির্দেশ করবে পিছনের এলিমেন্টের পজিশন। এভাবে কিউ ইমপ্লিমেন্ট করা হয় না, করলে মেমরির সর্বোচ্চ ব্যবহার করতে পারবে না। একটা সমাধান হলো লিংকড লিস্ট 
	  ব্যবহার করা। লিংকড লিস্ট ব্যবহার করলে প্রথম সুবিধা হলো কিউ এর সাইজ ফিক্সড করে দেয়া দরকার নেই। আরেকটা সুবিধা হলো তুমি যখন ডিকিউ করবে তখন টেইল পয়েন্টার যে এলিমেন্টকে 
	  পয়েন্ট করে আছে তাকে মেমরি থেকে মুছে দিতে পারবে।
	
5. Reverse : 
	i) Stack reverse : Every top value tranfer a new stack. then new stack is a reverse stack is a reverse stack for previous stack.
	
	ii) Queue reverse : Every Front value of queue insert in a new stack. Then again stack every top value insert in previous queue. Now queue is reverse.